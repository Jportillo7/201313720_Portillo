
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 14 14:27:00 CST 2016
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 14 14:27:00 CST 2016
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\004\000\002\002\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\003\010\000\002\004\005\000\002" +
    "\005\005\000\002\007\007\000\002\011\004\000\002\011" +
    "\003\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\012\013\000\002\014\004\000\002" +
    "\014\003\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\015\006\000\002\016\004\000\002\016\003\000" +
    "\002\017\006\000\002\020\004\000\002\020\003\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\003" +
    "\000\002\024\013\000\002\025\004\000\002\025\003\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\046\002\000\002\027\007\000" +
    "\002\031\004\000\002\031\003\000\002\047\002\000\002" +
    "\030\007\000\002\033\004\000\002\033\003\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\050\002\000\002\034\015\000" +
    "\002\041\011\000\002\042\004\000\002\042\003\000\002" +
    "\043\011\000\002\043\007\000\002\044\004\000\002\044" +
    "\003\000\002\045\003\000\002\045\003\000\002\035\005" +
    "\000\002\036\004\000\002\036\003\000\002\037\005\000" +
    "\002\037\005\000\002\037\005\000\002\037\005\000\002" +
    "\037\010\000\002\037\010\000\002\037\005\000\002\037" +
    "\003\000\002\040\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\006\013\015\017\012\001\002\000\004\002" +
    "\ufffa\001\002\000\004\017\257\001\002\000\004\002\ufffb" +
    "\001\002\000\004\002\ufff8\001\002\000\004\002\000\001" +
    "\002\000\004\002\256\001\002\000\012\021\112\037\115" +
    "\053\113\075\114\001\002\000\004\002\ufffc\001\002\000" +
    "\004\002\ufff9\001\002\000\004\031\021\001\002\000\004" +
    "\002\ufffd\001\002\000\004\002\ufffe\001\002\000\004\002" +
    "\uffff\001\002\000\004\010\022\001\002\000\004\101\023" +
    "\001\002\000\004\004\024\001\002\000\006\015\025\100" +
    "\027\001\002\000\004\100\103\001\002\000\010\014\uffb5" +
    "\015\uffb5\100\uffb5\001\002\000\004\111\033\001\002\000" +
    "\010\014\032\015\025\100\027\001\002\000\010\014\uffb6" +
    "\015\uffb6\100\uffb6\001\002\000\004\017\uffb7\001\002\000" +
    "\006\100\037\113\035\001\002\000\010\100\037\112\040" +
    "\113\035\001\002\000\010\100\uffaf\112\uffaf\113\uffaf\001" +
    "\002\000\010\100\uffb1\112\uffb1\113\uffb1\001\002\000\010" +
    "\100\uffb0\112\uffb0\113\uffb0\001\002\000\004\010\042\001" +
    "\002\000\010\100\uffb2\112\uffb2\113\uffb2\001\002\000\004" +
    "\114\043\001\002\000\012\077\050\107\052\110\051\111" +
    "\046\001\002\000\004\016\045\001\002\000\010\014\uffb4" +
    "\015\uffb4\100\uffb4\001\002\000\012\077\050\107\052\110" +
    "\051\111\046\001\002\000\030\077\uffa4\103\uffa4\104\uffa4" +
    "\105\uffa4\106\uffa4\107\uffa4\110\uffa4\111\uffa4\112\uffa4\113" +
    "\uffa4\115\uffa4\001\002\000\050\016\uffa3\027\uffa3\030\uffa3" +
    "\031\uffa3\034\uffa3\035\uffa3\064\uffa3\072\uffa3\077\uffa3\103" +
    "\uffa3\104\uffa3\105\uffa3\106\uffa3\107\uffa3\110\uffa3\111\uffa3" +
    "\112\uffa3\113\uffa3\115\uffa3\001\002\000\004\111\074\001" +
    "\002\000\004\111\067\001\002\000\014\077\050\107\052" +
    "\110\051\111\046\115\065\001\002\000\024\077\uffac\103" +
    "\056\104\057\105\055\106\060\107\uffac\110\uffac\111\uffac" +
    "\115\uffac\001\002\000\012\077\050\107\052\110\051\111" +
    "\046\001\002\000\012\077\050\107\052\110\051\111\046" +
    "\001\002\000\012\077\050\107\052\110\051\111\046\001" +
    "\002\000\012\077\050\107\052\110\051\111\046\001\002" +
    "\000\030\077\uffa8\103\uffa8\104\uffa8\105\uffa8\106\uffa8\107" +
    "\uffa8\110\uffa8\111\uffa8\112\uffa8\113\uffa8\115\uffa8\001\002" +
    "\000\030\077\uffaa\103\uffaa\104\uffaa\105\055\106\060\107" +
    "\uffaa\110\uffaa\111\uffaa\112\uffaa\113\uffaa\115\uffaa\001\002" +
    "\000\030\077\uffab\103\uffab\104\uffab\105\055\106\060\107" +
    "\uffab\110\uffab\111\uffab\112\uffab\113\uffab\115\uffab\001\002" +
    "\000\030\077\uffa9\103\uffa9\104\uffa9\105\uffa9\106\uffa9\107" +
    "\uffa9\110\uffa9\111\uffa9\112\uffa9\113\uffa9\115\uffa9\001\002" +
    "\000\024\016\uffae\027\uffae\030\uffae\031\uffae\034\uffae\035" +
    "\uffae\064\uffae\072\uffae\104\uffae\001\002\000\024\077\uffad" +
    "\103\056\104\057\105\055\106\060\107\uffad\110\uffad\111" +
    "\uffad\115\uffad\001\002\000\012\077\050\107\052\110\051" +
    "\111\046\001\002\000\014\103\056\104\057\105\055\106" +
    "\060\113\071\001\002\000\012\077\050\107\052\110\051" +
    "\111\046\001\002\000\014\103\056\104\057\105\055\106" +
    "\060\112\073\001\002\000\030\077\uffa6\103\uffa6\104\uffa6" +
    "\105\uffa6\106\uffa6\107\uffa6\110\uffa6\111\uffa6\112\uffa6\113" +
    "\uffa6\115\uffa6\001\002\000\012\077\050\107\052\110\051" +
    "\111\046\001\002\000\014\103\056\104\057\105\055\106" +
    "\060\113\076\001\002\000\012\077\050\107\052\110\051" +
    "\111\046\001\002\000\014\103\056\104\057\105\055\106" +
    "\060\112\100\001\002\000\030\077\uffa7\103\uffa7\104\uffa7" +
    "\105\uffa7\106\uffa7\107\uffa7\110\uffa7\111\uffa7\112\uffa7\113" +
    "\uffa7\115\uffa7\001\002\000\014\103\056\104\057\105\055" +
    "\106\060\112\102\001\002\000\030\077\uffa5\103\uffa5\104" +
    "\uffa5\105\uffa5\106\uffa5\107\uffa5\110\uffa5\111\uffa5\112\uffa5" +
    "\113\uffa5\115\uffa5\001\002\000\004\010\104\001\002\000" +
    "\010\077\050\101\105\114\043\001\002\000\024\016\uffc7" +
    "\027\uffc7\030\uffc7\031\uffc7\034\uffc7\035\uffc7\064\uffc7\072" +
    "\uffc7\104\uffc7\001\002\000\024\016\uffc9\027\uffc9\030\uffc9" +
    "\031\uffc9\034\uffc9\035\uffc9\064\uffc9\072\uffc9\104\uffc9\001" +
    "\002\000\004\016\111\001\002\000\024\016\uffc8\027\uffc8" +
    "\030\uffc8\031\uffc8\034\uffc8\035\uffc8\064\uffc8\072\uffc8\104" +
    "\uffc8\001\002\000\010\014\uffb3\015\uffb3\100\uffb3\001\002" +
    "\000\004\023\245\001\002\000\004\027\211\001\002\000" +
    "\004\027\150\001\002\000\020\023\126\025\123\041\124" +
    "\043\122\045\116\047\125\051\120\001\002\000\004\077" +
    "\146\001\002\000\022\023\ufff2\025\ufff2\040\ufff2\041\ufff2" +
    "\043\ufff2\045\ufff2\047\ufff2\051\ufff2\001\002\000\004\101" +
    "\144\001\002\000\022\023\126\025\123\040\142\041\124" +
    "\043\122\045\116\047\125\051\120\001\002\000\004\101" +
    "\137\001\002\000\004\100\135\001\002\000\004\101\133" +
    "\001\002\000\004\102\131\001\002\000\004\077\127\001" +
    "\002\000\004\024\130\001\002\000\022\023\ufff1\025\ufff1" +
    "\040\ufff1\041\ufff1\043\ufff1\045\ufff1\047\ufff1\051\ufff1\001" +
    "\002\000\004\050\132\001\002\000\022\023\uffec\025\uffec" +
    "\040\uffec\041\uffec\043\uffec\045\uffec\047\uffec\051\uffec\001" +
    "\002\000\004\042\134\001\002\000\022\023\ufff0\025\ufff0" +
    "\040\ufff0\041\ufff0\043\ufff0\045\ufff0\047\ufff0\051\ufff0\001" +
    "\002\000\004\026\136\001\002\000\022\023\uffee\025\uffee" +
    "\040\uffee\041\uffee\043\uffee\045\uffee\047\uffee\051\uffee\001" +
    "\002\000\004\044\140\001\002\000\022\023\uffef\025\uffef" +
    "\040\uffef\041\uffef\043\uffef\045\uffef\047\uffef\051\uffef\001" +
    "\002\000\022\023\ufff3\025\ufff3\040\ufff3\041\ufff3\043\ufff3" +
    "\045\ufff3\047\ufff3\051\ufff3\001\002\000\004\020\143\001" +
    "\002\000\004\002\ufff4\001\002\000\004\052\145\001\002" +
    "\000\022\023\uffeb\025\uffeb\040\uffeb\041\uffeb\043\uffeb\045" +
    "\uffeb\047\uffeb\051\uffeb\001\002\000\004\046\147\001\002" +
    "\000\022\023\uffed\025\uffed\040\uffed\041\uffed\043\uffed\045" +
    "\uffed\047\uffed\051\uffed\001\002\000\004\010\151\001\002" +
    "\000\004\101\152\001\002\000\004\004\153\001\002\000" +
    "\022\041\163\055\162\061\154\063\155\065\161\067\160" +
    "\071\157\073\156\001\002\000\004\101\207\001\002\000" +
    "\010\077\050\101\105\114\043\001\002\000\004\077\203" +
    "\001\002\000\010\077\050\101\105\114\043\001\002\000" +
    "\004\101\177\001\002\000\004\101\175\001\002\000\004" +
    "\077\173\001\002\000\004\101\171\001\002\000\024\041" +
    "\uffd2\055\uffd2\061\uffd2\063\uffd2\065\uffd2\067\uffd2\071\uffd2" +
    "\073\uffd2\076\uffd2\001\002\000\024\041\163\055\162\061" +
    "\154\063\155\065\161\067\160\071\157\073\156\076\167" +
    "\001\002\000\024\041\uffd3\055\uffd3\061\uffd3\063\uffd3\065" +
    "\uffd3\067\uffd3\071\uffd3\073\uffd3\076\uffd3\001\002\000\004" +
    "\020\170\001\002\000\004\002\uffd4\001\002\000\004\042" +
    "\172\001\002\000\024\041\uffd0\055\uffd0\061\uffd0\063\uffd0" +
    "\065\uffd0\067\uffd0\071\uffd0\073\uffd0\076\uffd0\001\002\000" +
    "\004\056\174\001\002\000\024\041\uffd1\055\uffd1\061\uffd1" +
    "\063\uffd1\065\uffd1\067\uffd1\071\uffd1\073\uffd1\076\uffd1\001" +
    "\002\000\004\066\176\001\002\000\024\041\uffce\055\uffce" +
    "\061\uffce\063\uffce\065\uffce\067\uffce\071\uffce\073\uffce\076" +
    "\uffce\001\002\000\004\070\200\001\002\000\024\041\uffcd" +
    "\055\uffcd\061\uffcd\063\uffcd\065\uffcd\067\uffcd\071\uffcd\073" +
    "\uffcd\076\uffcd\001\002\000\004\072\202\001\002\000\024" +
    "\041\uffcc\055\uffcc\061\uffcc\063\uffcc\065\uffcc\067\uffcc\071" +
    "\uffcc\073\uffcc\076\uffcc\001\002\000\004\074\204\001\002" +
    "\000\024\041\uffca\055\uffca\061\uffca\063\uffca\065\uffca\067" +
    "\uffca\071\uffca\073\uffca\076\uffca\001\002\000\004\064\206" +
    "\001\002\000\024\041\uffcf\055\uffcf\061\uffcf\063\uffcf\065" +
    "\uffcf\067\uffcf\071\uffcf\073\uffcf\076\uffcf\001\002\000\004" +
    "\062\210\001\002\000\024\041\uffcb\055\uffcb\061\uffcb\063" +
    "\uffcb\065\uffcb\067\uffcb\071\uffcb\073\uffcb\076\uffcb\001\002" +
    "\000\004\010\212\001\002\000\004\101\213\001\002\000" +
    "\004\004\214\001\002\000\016\041\224\045\220\051\215" +
    "\055\223\057\216\061\222\001\002\000\004\101\242\001" +
    "\002\000\004\077\240\001\002\000\020\041\uffe8\045\uffe8" +
    "\051\uffe8\054\uffe8\055\uffe8\057\uffe8\061\uffe8\001\002\000" +
    "\004\077\236\001\002\000\020\041\224\045\220\051\215" +
    "\054\234\055\223\057\216\061\222\001\002\000\004\101" +
    "\231\001\002\000\004\077\227\001\002\000\004\101\225" +
    "\001\002\000\004\042\226\001\002\000\020\041\uffe5\045" +
    "\uffe5\051\uffe5\054\uffe5\055\uffe5\057\uffe5\061\uffe5\001\002" +
    "\000\004\056\230\001\002\000\020\041\uffe7\045\uffe7\051" +
    "\uffe7\054\uffe7\055\uffe7\057\uffe7\061\uffe7\001\002\000\004" +
    "\062\232\001\002\000\020\041\uffe2\045\uffe2\051\uffe2\054" +
    "\uffe2\055\uffe2\057\uffe2\061\uffe2\001\002\000\020\041\uffe9" +
    "\045\uffe9\051\uffe9\054\uffe9\055\uffe9\057\uffe9\061\uffe9\001" +
    "\002\000\004\020\235\001\002\000\004\002\uffea\001\002" +
    "\000\004\046\237\001\002\000\020\041\uffe3\045\uffe3\051" +
    "\uffe3\054\uffe3\055\uffe3\057\uffe3\061\uffe3\001\002\000\004" +
    "\060\241\001\002\000\020\041\uffe6\045\uffe6\051\uffe6\054" +
    "\uffe6\055\uffe6\057\uffe6\061\uffe6\001\002\000\004\052\243" +
    "\001\002\000\020\041\uffe4\045\uffe4\051\uffe4\054\uffe4\055" +
    "\uffe4\057\uffe4\061\uffe4\001\002\000\004\025\251\001\002" +
    "\000\004\077\246\001\002\000\004\024\247\001\002\000" +
    "\004\025\ufff6\001\002\000\004\022\254\001\002\000\004" +
    "\100\252\001\002\000\004\026\253\001\002\000\004\022" +
    "\ufff5\001\002\000\004\020\255\001\002\000\004\002\ufff7" +
    "\001\002\000\004\002\001\001\002\000\006\053\262\075" +
    "\263\001\002\000\006\020\uffdf\053\uffdf\001\002\000\006" +
    "\020\uffc6\075\263\001\002\000\022\027\271\030\274\031" +
    "\275\032\301\033\272\036\276\100\346\113\273\001\002" +
    "\000\014\027\322\030\327\031\324\034\326\035\323\001" +
    "\002\000\006\020\266\053\270\001\002\000\010\020\uffc3" +
    "\054\uffc3\075\uffc3\001\002\000\004\002\uffe1\001\002\000" +
    "\006\020\uffe0\053\uffe0\001\002\000\020\027\271\030\274" +
    "\031\275\032\301\033\272\036\276\113\273\001\002\000" +
    "\004\010\317\001\002\000\004\010\315\001\002\000\022" +
    "\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\036\uffd5\104" +
    "\uffd5\113\uffd5\001\002\000\004\010\313\001\002\000\004" +
    "\010\311\001\002\000\004\010\307\001\002\000\022\027" +
    "\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\036\uffdc\104\uffdc" +
    "\113\uffdc\001\002\000\022\027\271\030\274\031\275\032" +
    "\301\033\272\036\276\104\304\113\273\001\002\000\004" +
    "\010\302\001\002\000\004\077\303\001\002\000\022\027" +
    "\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\036\uffd7\104\uffd7" +
    "\113\uffd7\001\002\000\004\004\306\001\002\000\022\027" +
    "\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\036\uffdd\104\uffdd" +
    "\113\uffdd\001\002\000\006\020\uffde\053\uffde\001\002\000" +
    "\004\077\310\001\002\000\022\027\uffd8\030\uffd8\031\uffd8" +
    "\032\uffd8\033\uffd8\036\uffd8\104\uffd8\113\uffd8\001\002\000" +
    "\004\101\312\001\002\000\022\027\uffd9\030\uffd9\031\uffd9" +
    "\032\uffd9\033\uffd9\036\uffd9\104\uffd9\113\uffd9\001\002\000" +
    "\004\077\314\001\002\000\022\027\uffda\030\uffda\031\uffda" +
    "\032\uffda\033\uffda\036\uffda\104\uffda\113\uffda\001\002\000" +
    "\004\101\316\001\002\000\022\027\uffd6\030\uffd6\031\uffd6" +
    "\032\uffd6\033\uffd6\036\uffd6\104\uffd6\113\uffd6\001\002\000" +
    "\004\101\320\001\002\000\022\027\uffdb\030\uffdb\031\uffdb" +
    "\032\uffdb\033\uffdb\036\uffdb\104\uffdb\113\uffdb\001\002\000" +
    "\016\027\uffbf\030\uffbf\031\uffbf\034\uffbf\035\uffbf\104\uffbf" +
    "\001\002\000\004\010\344\001\002\000\004\010\342\001" +
    "\002\000\004\010\340\001\002\000\016\027\322\030\327" +
    "\031\324\034\326\035\323\104\uffc2\001\002\000\004\010" +
    "\332\001\002\000\004\010\330\001\002\000\010\077\050" +
    "\101\105\114\043\001\002\000\016\027\uffbd\030\uffbd\031" +
    "\uffbd\034\uffbd\035\uffbd\104\uffbd\001\002\000\010\077\050" +
    "\101\105\114\043\001\002\000\016\027\uffbc\030\uffbc\031" +
    "\uffbc\034\uffbc\035\uffbc\104\uffbc\001\002\000\016\027\uffc0" +
    "\030\uffc0\031\uffc0\034\uffc0\035\uffc0\104\uffc0\001\002\000" +
    "\004\104\336\001\002\000\004\004\337\001\002\000\010" +
    "\020\uffc1\054\uffc1\075\uffc1\001\002\000\010\077\050\101" +
    "\105\114\043\001\002\000\016\027\uffbb\030\uffbb\031\uffbb" +
    "\034\uffbb\035\uffbb\104\uffbb\001\002\000\010\077\050\101" +
    "\105\114\043\001\002\000\016\027\uffba\030\uffba\031\uffba" +
    "\034\uffba\035\uffba\104\uffba\001\002\000\010\077\050\101" +
    "\105\114\043\001\002\000\016\027\uffbe\030\uffbe\031\uffbe" +
    "\034\uffbe\035\uffbe\104\uffbe\001\002\000\004\010\347\001" +
    "\002\000\004\077\350\001\002\000\004\004\351\001\002" +
    "\000\004\075\263\001\002\000\006\054\uffb9\075\263\001" +
    "\002\000\004\054\355\001\002\000\010\020\uffc4\054\uffc4" +
    "\075\uffc4\001\002\000\004\020\356\001\002\000\004\002" +
    "\uffb8\001\002\000\004\020\360\001\002\000\004\002\uffc5" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\030\002\010\003\017\006\007\007\016\012" +
    "\015\015\012\023\005\024\003\027\013\034\006\041\004" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\042\027\043\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\044\033" +
    "\045\035\001\001\000\004\045\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\043\001\001\000\010\036" +
    "\052\037\053\040\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\037\100\040\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\037\065\040\046\001\001\000\002\001\001\000" +
    "\006\037\063\040\046\001\001\000\006\037\062\040\046" +
    "\001\001\000\006\037\061\040\046\001\001\000\006\037" +
    "\060\040\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\037\067\040\046\001\001\000\002" +
    "\001\001\000\006\037\071\040\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\037\074\040\046\001\001" +
    "\000\002\001\001\000\006\037\076\040\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\022\106\035\107\040" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\243\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\116\011\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\025\164\026\163" +
    "\001\001\000\002\001\001\000\010\022\204\035\107\040" +
    "\105\001\001\000\002\001\001\000\010\022\200\035\107" +
    "\040\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\165\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\216\014\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\232\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\247\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\016\263\017\257\030" +
    "\264\031\260\001\001\000\002\001\001\000\006\030\353" +
    "\046\356\001\001\000\006\020\277\021\276\001\001\000" +
    "\006\032\320\033\324\001\001\000\004\017\266\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\277\021\276\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\304" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\032\333\047\334\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\022\330\035\107" +
    "\040\105\001\001\000\002\001\001\000\010\022\332\035" +
    "\107\040\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\022\340\035\107\040\105\001\001\000\002\001\001" +
    "\000\010\022\342\035\107\040\105\001\001\000\002\001" +
    "\001\000\010\022\344\035\107\040\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\030\264\031\351\001\001\000\006\030\353" +
    "\050\352\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public Nodo raiz;
    //public ArrayList<Usuarios> Lista_crearUsuarios;
    //public String resultado="";

    
    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        System.out.println("Error sintáctico en la Línea " + (s.right) +" Columna "+s.left+ ". Identificador "
        +s.value + " no reconocido." );
        //PrincipalForm.LISTA_ERRORES_SINTACTICOS.add(new Parametros("Error Sintáctico "+s.value,PrincipalForm.nombreArchivo,s.right, s.left));
        report_error("Syntax error " + s.value, cur_token);

}

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error en la Línea " + (s.right)+ " Columna "+s.left+". Identificador " +
        s.value + " no reconocido.");
        //PrincipalForm.LISTA_ERRORES_SINTACTICOS.add(new Parametros("Error Sintáctico "+s.value,PrincipalForm.nombreArchivo,s.right, s.left));
        report_fatal_error("ERROR FATAL", null);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {


   //public ArrayList<Usuarios> Lista_crearUsuarios;

  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NUM ::= numero 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo("numero");
                        Nodo hijo = new Nodo(n);
                        padre.hijos.add(hijo);
                        RESULT=padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NUM",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION ::= NUM 
            {
              Nodo RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo dat = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                       RESULT=dat;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= apar EXPRESION cpar 
            {
              Nodo RESULT =null;
		int holaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int holaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo hola = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        RESULT = hola;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= rq apar EXPRESION coma EXPRESION cpar 
            {
              Nodo RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo izq = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo der = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                       /* double entero = Double.parseDouble((String)izq);
                        double radical = Double.parseDouble((String)der);
                        int resu = (int)Math.pow(entero, 1/radical);
                        RESULT = String.valueOf(resu);*/

                        Nodo padre = new Nodo("Raiz");
                        padre.hijos.add(izq);
                        padre.hijos.add(der);
                        RESULT = padre;
                        
                     
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= ptn apar EXPRESION coma EXPRESION cpar 
            {
              Nodo RESULT =null;
		int basleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int basright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo bas = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        /*double base = Double.parseDouble((String)bas);
                        double exponente = Double.parseDouble((String)exp);
                        int resu = (int)Math.pow(base, exponente);
                        RESULT = String.valueOf(resu);*/

                        Nodo padre = new Nodo("Potencia");
                        padre.hijos.add(bas);
                        padre.hijos.add(exp);
                        RESULT = padre;
                        
                     
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= EXPRESION division EXPRESION 
            {
              Nodo RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo izq = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo der = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                       /* int val1 = Integer.parseInt((String)eizq);
                        int val2 = Integer.parseInt((String)eder);
                        int resu = val1 / val2;
                        
                        RESULT = String.valueOf(resu);*/
                        
                        Nodo padre = new Nodo("/");
                        padre.hijos.add(izq);
                        padre.hijos.add(der);
                        RESULT = padre;
                        
                     
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION ::= EXPRESION por EXPRESION 
            {
              Nodo RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo izq = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo der = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                       /* int val1 = Integer.parseInt((String)eizq);
                        int val2 = Integer.parseInt((String)eder);
                        int resu = val1 * val2;
                        RESULT = String.valueOf(resu);*/
                        
                        Nodo padre = new Nodo("*");
                        padre.hijos.add(izq);
                        padre.hijos.add(der);
                        RESULT = padre;

                     
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= EXPRESION menor EXPRESION 
            {
              Nodo RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo izq = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo der = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                       /* int val1 = Integer.parseInt((String)eizq);
                        int val2 = Integer.parseInt((String)eder);
                        int resu = val1 - val2;
                        RESULT = String.valueOf(resu);*/

                        Nodo padre = new Nodo("-");
                        padre.hijos.add(izq);
                        padre.hijos.add(der);
                        RESULT = padre;
                     
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= EXPRESION mas EXPRESION 
            {
              Nodo RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo izq = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo der = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                      /* int val1 = Integer.parseInt((String)eizq);
                       int val2 = Integer.parseInt((String)eder);
                       int resu = val1 + val2;
                       RESULT = String.valueOf(resu);*/

                        Nodo padre = new Nodo("+");
                        padre.hijos.add(izq);
                        padre.hijos.add(der);
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPERACIONES1 ::= EXPRESION 
            {
              Nodo RESULT =null;
		int rcompleto1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rcompleto1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo rcompleto1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                       //RESULT = rcompleto1;
                       Nodo lista = new Nodo("Operaciones");
                       lista.hijos.add(rcompleto1);
                       RESULT = lista;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES1",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPERACIONES1 ::= OPERACIONES1 EXPRESION 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int rcompleto1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rcompleto1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo rcompleto1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                       //String arbol = rcompleto +"\n" + rcompleto1;
                       //RESULT = arbol;
                       
                       lista.hijos.add(rcompleto1);
                       RESULT = lista;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES1",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPERACIONES ::= illave OPERACIONES1 fllave 
            {
              Nodo RESULT =null;
		int operacionesleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int operacionesright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo operaciones = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        Nodo padre = new Nodo("EOA");
                        padre.hijos.add(operaciones);
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PARAM ::= coma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAM",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PARAM ::= id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAM",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PARAMETROS ::= PARAM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PARAMETROS ::= PARAMETROS PARAM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EMATE1 ::= cons id igual MOD ptcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EMATE1",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EMATE1 ::= id apar PARAMETROS cpar igual OPERACIONES ptcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EMATE1",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EMATE ::= EMATE1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EMATE",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EMATE ::= EMATE EMATE1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EMATE",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ETIQUETAMATE ::= imate nomnom igual cadenastring dolar EMATE fmate 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ETIQUETAMATE",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // MODPRO2 ::= ETIQUETAMATE irequest itienda id igual numero dolar MODLISTPRO NT$2 ftienda frequest 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ableft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int abright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object ab = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MODPRO2",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$2 ::= 
            {
              Object RESULT =null;
		int ableft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int abright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object ab = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
RESULT = ab; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LISTMODPRO ::= cantcant igual MOD 
            {
              Object RESULT =null;
		int arbollleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int arbollright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo arboll = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = arboll; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTMODPRO",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LISTMODPRO ::= nomnom igual MOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTMODPRO",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LISTMODPRO ::= sucursucur igual MOD 
            {
              Object RESULT =null;
		int arbolkleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int arbolkright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo arbolk = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = arbolk; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTMODPRO",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LISTMODPRO ::= codcod igual MOD 
            {
              Object RESULT =null;
		int arboljleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int arboljright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo arbolj = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = arbolj; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTMODPRO",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LISTMODPRO ::= tiptip igual MOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTMODPRO",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LISTMODPRO1 ::= LISTMODPRO 
            {
              Object RESULT =null;
		int arbolileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int arboliright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object arboli = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = arboli; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTMODPRO1",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LISTMODPRO1 ::= LISTMODPRO1 LISTMODPRO 
            {
              Object RESULT =null;
		int abaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int abaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object aba = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int abbleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int abbright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object abb = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 String resul = aba +"\n"+ abb; RESULT = resul; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTMODPRO1",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // MODIPROO ::= iproducto LISTMODPRO1 NT$1 menor dolar 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int arbolkleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int arbolkright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object arbolk = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MODIPROO",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$1 ::= 
            {
              Object RESULT =null;
		int arbolkleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int arbolkright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object arbolk = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 RESULT = arbolk; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // MODLISTPRO ::= MODIPROO 
            {
              Object RESULT =null;
		int arbollleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int arbollright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object arboll = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = arboll; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MODLISTPRO",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // MODLISTPRO ::= MODLISTPRO MODIPROO 
            {
              Object RESULT =null;
		int abaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int abaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object aba = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int abbleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int abbright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object abb = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 String resul = aba +"\n"+ abb; RESULT = resul; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MODLISTPRO",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // MODPRO ::= ETIQUETAMATE irequest MODLISTPRO NT$0 frequest 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int abbcleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int abbcright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object abbc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MODPRO",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$0 ::= 
            {
              Object RESULT =null;
		int abbcleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int abbcright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object abbc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 RESULT = abbc;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // MOD ::= cadenastring 
            {
              Nodo RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        String cad = cadena.replace("\"","");
                        Nodo padre = new Nodo("Cadena");
                        Nodo hijo = new Nodo(cad);
                        padre.hijos.add(hijo);
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MOD",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // MOD ::= OPERACIONES 
            {
              Nodo RESULT =null;
		int opeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int operight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo ope = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = ope;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MOD",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // MOD ::= NUM 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo num = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = num; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MOD",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LISTPRO ::= isucursal numero fsucursal 
            {
              Nodo RESULT =null;
		int arbolhleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int arbolhright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String arbolh = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        Nodo padre = new Nodo("Sucursal \n del producto \n creado");
                        Nodo hijo = new Nodo(arbolh);
                        padre.hijos.add(hijo);
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTPRO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LISTPRO ::= iimg cadenastring fimg 
            {
              Nodo RESULT =null;
		int arbolggleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int arbolggright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String arbolgg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        String arbolg = arbolgg.replace("\"","");
                        Nodo padre = new Nodo("Imagen \n del producto \n creado");
                        Nodo hijo = new Nodo(arbolg);
                        padre.hijos.add(hijo);
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTPRO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LISTPRO ::= itam MOD ftam 
            {
              Nodo RESULT =null;
		int arbolfleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int arbolfright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo arbolf = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        RESULT = arbolf;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTPRO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LISTPRO ::= icolor cadenastring fcolor 
            {
              Nodo RESULT =null;
		int arboleeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int arboleeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String arbolee = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        String arbole = arbolee.replace("\"","");
                        Nodo padre = new Nodo("Color \n del producto \n creado");
                        Nodo hijo = new Nodo(arbole);
                        padre.hijos.add(hijo);
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTPRO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LISTPRO ::= imarca cadenastring fmarca 
            {
              Nodo RESULT =null;
		int arbolddleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int arbolddright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String arboldd = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        String arbold = arboldd.replace("\"","");
                        Nodo padre = new Nodo("Marca \n del producto \n creado");
                        Nodo hijo = new Nodo(arbold);
                        padre.hijos.add(hijo);
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTPRO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LISTPRO ::= icantidad MOD fcantidad 
            {
              Nodo RESULT =null;
		int arbolcleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int arbolcright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo arbolc = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        RESULT = arbolc;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTPRO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LISTPRO ::= inombre cadenastring fnombre 
            {
              Nodo RESULT =null;
		int arbolbbleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int arbolbbright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String arbolbb = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        String arbolb = arbolbb.replace("\"","");
                        Nodo padre = new Nodo("Nombre \n del producto \n creado");
                        Nodo hijo = new Nodo(arbolb);
                        padre.hijos.add(hijo);
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTPRO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LISTPRO ::= icodigo numero fcodigo 
            {
              Nodo RESULT =null;
		int arbolaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int arbolaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String arbola = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        Nodo padre = new Nodo("Codigo \n del producto \n creado");
                        Nodo hijo = new Nodo(arbola);
                        padre.hijos.add(hijo);
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTPRO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PARPRO ::= LISTPRO 
            {
              Nodo RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo lista = new Nodo("Parametros \n de \n Producto");
                        lista.hijos.add(par);
                        RESULT = lista;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARPRO",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PARPRO ::= PARPRO LISTPRO 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        lista.hijos.add(par);
                        RESULT = lista;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARPRO",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PRODUCTO ::= irequest iproducto tiptip igual cadenastring dolar PARPRO fproducto frequest 
            {
              Nodo RESULT =null;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo parametros = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                        Nodo padre = new Nodo("Crear Producto");
                        padre.hijos.add(parametros);
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRODUCTO",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LISTMODT1 ::= coma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTMODT1",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LISTMODT1 ::= dirdir igual cadenastring 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTMODT1",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LISTMODT1 ::= teltel igual numero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTMODT1",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LISTMODT1 ::= propipropi igual numero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTMODT1",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LISTMODT1 ::= nomnom igual cadenastring 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTMODT1",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LISTMODT1 ::= codcod igual numero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTMODT1",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LISTMODT1 ::= tiptip igual cadenastring 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTMODT1",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LISTMODT ::= LISTMODT1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTMODT",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LISTMODT ::= LISTMODT LISTMODT1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTMODT",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // MODTIENDA ::= itienda LISTMODT menor dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MODTIENDA",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // MODIFICAR ::= MODTIENDA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MODIFICAR",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // MODIFICAR ::= MODIFICAR MODTIENDA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MODIFICAR",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // MODIFICARTIENDA ::= ETIQUETAMATE irequest MODIFICAR frequest 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MODIFICARTIENDA",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PARTIENDA ::= iimg cadenastring fimg 
            {
              Nodo RESULT =null;
		int imgtiendaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int imgtiendaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String imgtienda = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        String imatienda = imgtienda.replace("\"","");
                        Nodo padre = new Nodo("Imagen \n de \n tienda");
                        Nodo hijo = new Nodo(imatienda);
                        padre.hijos.add(hijo);
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARTIENDA",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PARTIENDA ::= itelefono numero ftelefono 
            {
              Nodo RESULT =null;
		int teltiendaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int teltiendaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String teltienda = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        Nodo padre = new Nodo("Telefono \n de \n Tienda");
                        Nodo hijo = new Nodo(teltienda);
                        padre.hijos.add(hijo);
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARTIENDA",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PARTIENDA ::= idireccion cadenastring fdireccion 
            {
              Nodo RESULT =null;
		int dirtiendaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dirtiendaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String dirtienda = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        String direcciontienda = dirtienda.replace("\"","");
                        Nodo padre = new Nodo("Direccion \n de \n Tienda");
                        Nodo hijo = new Nodo(direcciontienda);
                        padre.hijos.add(hijo);
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARTIENDA",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PARTIENDA ::= inombre cadenastring fnombre 
            {
              Nodo RESULT =null;
		int nomtiendaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nomtiendaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String nomtienda = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        String nombretienda = nomtienda.replace("\"","");
                        Nodo padre = new Nodo("Nombre \n de \n Tienda");
                        Nodo hijo = new Nodo(nombretienda);
                        padre.hijos.add(hijo);
                        RESULT = padre;
                        
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARTIENDA",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PARTIENDA ::= ipropietario numero fpropietario 
            {
              Nodo RESULT =null;
		int protiendaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int protiendaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String protienda = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        Nodo padre = new Nodo("Propietario \n de \n Tienda");
                        Nodo hijo = new Nodo(protienda);
                        padre.hijos.add(hijo);
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARTIENDA",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PARTIENDA ::= icodigo numero fcodigo 
            {
              Nodo RESULT =null;
		int codtiendaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int codtiendaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String codtienda = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        Nodo padre = new Nodo("Codigo \n de \n Tienda");
                        Nodo hijo = new Nodo(codtienda);
                        padre.hijos.add(hijo);
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARTIENDA",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTIENDA ::= PARTIENDA 
            {
              Nodo RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo lista =new Nodo("Parametros \n Tienda");
                        lista.hijos.add(par);
                        RESULT = lista;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTIENDA",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LISTIENDA ::= LISTIENDA PARTIENDA 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        lista.hijos.add(par);
                        RESULT = lista;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTIENDA",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CREARTIENDA ::= irequest itienda tiptip igual cadenastring dolar LISTIENDA ftienda frequest 
            {
              Nodo RESULT =null;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo parametros = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                        Nodo padre = new Nodo("Crear tienda");
                        padre.hijos.add(parametros);
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CREARTIENDA",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PAR ::= idireccion cadenastring fdireccion 
            {
              Nodo RESULT =null;
		int usuariodireccionleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int usuariodireccionright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String usuariodireccion = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        String usudir = usuariodireccion.replace("\"","");
                        Nodo padre = new Nodo("Direccion \n Usuario Creado");
                        Nodo hijo = new Nodo(usudir);
                        padre.hijos.add(hijo);
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PAR",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PAR ::= iemail correo femail 
            {
              Nodo RESULT =null;
		int usuariocorreoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int usuariocorreoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String usuariocorreo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        String usumail = usuariocorreo.replace("\"","");
                        Nodo padre = new Nodo("Email \n Usuario Creado");
                        Nodo hijo = new Nodo(usumail);
                        padre.hijos.add(hijo);
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PAR",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PAR ::= itelefono numero ftelefono 
            {
              Nodo RESULT =null;
		int usuariotelefonoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int usuariotelefonoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String usuariotelefono = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        
                        Nodo padre = new Nodo("Telefono\n Usuario Creado");
                        Nodo hijo = new Nodo((String)usuariotelefono);
                        padre.hijos.add(hijo);
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PAR",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PAR ::= ipass id fpass 
            {
              Nodo RESULT =null;
		int usuariopasswordleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int usuariopasswordright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String usuariopassword = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        Nodo padre = new Nodo("Password \n Usuario Creado");
                        Nodo hijo = new Nodo(usuariopassword);
                        padre.hijos.add(hijo);
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PAR",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PAR ::= iapellido cadenastring fapellido 
            {
              Nodo RESULT =null;
		int usuarioapellidoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int usuarioapellidoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String usuarioapellido = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        String usuape = usuarioapellido.replace("\"","");
                        Nodo padre = new Nodo("Apellido \n Usuario Creado");
                        Nodo hijo = new Nodo(usuape);
                        padre.hijos.add(hijo);
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PAR",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PAR ::= inombre cadenastring fnombre 
            {
              Nodo RESULT =null;
		int usuarionombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int usuarionombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String usuarionombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        
                        String usunom = usuarionombre.replace("\"","");
                        Nodo padre = new Nodo("Nombre \n Usuario Creado");
                        Nodo hijo = new Nodo(usunom);
                        padre.hijos.add(hijo);
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PAR",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PAR ::= iid numero fid 
            {
              Nodo RESULT =null;
		int usuarioleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int usuarioright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String usuario = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        Nodo padre = new Nodo("Id \n Usuario Creado");
                        Nodo hijo = new Nodo(usuario);
                        padre.hijos.add(hijo);
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PAR",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PARUSU ::= PAR 
            {
              Nodo RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo lista = new Nodo("Parametros Usuario");
                        lista.hijos.add(par);
                        RESULT = lista;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARUSU",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PARUSU ::= PARUSU PAR 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        lista.hijos.add(par);
                        RESULT = lista;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARUSU",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CREARUSUARIO ::= irequest icrearusuario PARUSU fcrearusuario frequest 
            {
              Nodo RESULT =null;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo parametros = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                        Nodo padre = new Nodo("Crear Usuario");
                        padre.hijos.add(parametros);
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CREARUSUARIO",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PASS ::= ipass id fpass 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        Nodo padre = new Nodo("Password\n del\n Usuario");
                        Nodo hijo = new Nodo(id);
                        padre.hijos.add(hijo);
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PASS",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ID ::= iid numero fid 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int entright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String ent = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        Nodo padre = new Nodo("Id\n" +"del\n"+ "Usuario");
                        Nodo hijo = new Nodo(ent);
                        padre.hijos.add(hijo);
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ID",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LOG ::= irequest iusuario ID PASS fusuario frequest 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int passleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int passright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object pass = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                        Nodo padre = new Nodo("Log");
                        padre.hijos.add((Nodo)id);
                        padre.hijos.add((Nodo)pass);
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOG",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // REQINICIO ::= MODPRO2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REQINICIO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // REQINICIO ::= MODPRO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REQINICIO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // REQINICIO ::= PRODUCTO 
            {
              Object RESULT =null;
		int crearproductoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int crearproductoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo crearproducto = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = crearproducto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REQINICIO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // REQINICIO ::= ELIMINARTIENDA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REQINICIO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // REQINICIO ::= MODIFICARTIENDA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REQINICIO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // REQINICIO ::= CREARTIENDA 
            {
              Object RESULT =null;
		int creartiendaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int creartiendaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo creartienda = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = creartienda;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REQINICIO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // REQINICIO ::= CREARUSUARIO 
            {
              Object RESULT =null;
		int crearusuarioleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int crearusuarioright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo crearusuario = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = crearusuario;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REQINICIO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // REQINICIO ::= LOG 
            {
              Object RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object log = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = log;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REQINICIO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= REQINICIO 
            {
              Object RESULT =null;
		int raizleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int raizright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object raiz = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.raiz = (Nodo)raiz;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

