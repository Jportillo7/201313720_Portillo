package Analizadores;

/* The following code was generated by JFlex 1.5.0-SNAPSHOT */



import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>src/Analizadores/Lexico.jflex</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENT_SIMPLE = 2;
  public static final int COMENT_MULTI = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\54\1\14\1\55\1\54\1\54\22\0\1\54\1\0\1\11"+
    "\1\0\1\15\3\0\1\50\1\51\1\13\1\43\1\41\1\37\1\2"+
    "\1\12\12\1\1\0\1\42\1\0\1\40\2\0\1\5\1\36\1\27"+
    "\1\6\1\25\1\30\1\32\1\26\1\3\1\22\2\3\1\31\1\10"+
    "\1\24\1\7\1\23\1\17\1\16\1\34\1\20\1\35\1\3\1\52"+
    "\3\3\1\46\1\0\1\47\1\0\1\4\1\0\1\36\1\27\1\6"+
    "\1\25\1\30\1\32\1\26\1\3\1\22\2\3\1\31\1\10\1\24"+
    "\1\7\1\23\1\17\1\16\1\34\1\20\1\35\1\3\1\52\3\3"+
    "\1\44\1\0\1\45\7\0\1\55\113\0\1\53\37\0\1\53\76\0"+
    "\2\21\115\0\1\33\u1ea8\0\1\55\1\55\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\4\1\6"+
    "\1\7\1\10\1\11\1\12\5\4\1\1\1\4\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\1\2\0\2\4\1\0"+
    "\1\30\1\31\1\32\13\0\1\33\1\0\5\4\1\0"+
    "\1\4\1\0\1\4\1\2\1\0\3\4\23\0\3\4"+
    "\1\34\1\4\1\0\1\4\1\0\1\4\1\0\2\35"+
    "\1\0\2\4\14\0\1\36\10\0\2\37\3\4\1\0"+
    "\1\4\1\0\1\4\2\0\1\4\1\0\1\4\5\0"+
    "\1\40\4\0\1\41\2\0\1\42\10\0\1\4\1\0"+
    "\2\4\1\0\1\4\1\0\1\4\1\0\2\43\1\0"+
    "\1\4\12\0\1\44\11\0\1\4\1\0\1\4\1\45"+
    "\1\0\1\4\1\0\1\4\1\46\1\0\1\4\1\0"+
    "\1\47\3\0\1\50\1\0\1\51\1\0\1\52\10\0"+
    "\1\53\3\0\1\4\1\0\1\4\1\0\1\4\1\0"+
    "\1\4\2\54\1\55\1\0\1\56\2\0\1\57\3\0"+
    "\1\60\5\0\1\61\2\0\1\62\2\0\1\63\1\0"+
    "\1\4\1\0\1\4\2\64\1\65\2\0\1\66\1\0"+
    "\1\67\1\0\1\70\2\0\1\71\1\0\1\72\4\0"+
    "\1\4\2\73\1\0\1\74\1\0\1\75\1\76\4\0"+
    "\1\77\2\0\1\100\1\0\1\101\2\0\1\4\1\0"+
    "\1\102\1\103\2\0\1\104\1\105\1\106\1\0\1\107"+
    "\1\110\2\111\3\0\1\112\2\0\1\113\1\0\1\114"+
    "\2\0\1\115\1\116\1\117\1\0\1\120";

  private static int [] zzUnpackAction() {
    int [] result = new int[331];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\212\0\346\0\212"+
    "\0\u0114\0\u0142\0\u0170\0\212\0\212\0\u019e\0\u01cc\0\u01fa"+
    "\0\u0228\0\u0256\0\u0284\0\u02b2\0\u02e0\0\212\0\212\0\212"+
    "\0\212\0\212\0\212\0\212\0\212\0\212\0\212\0\212"+
    "\0\212\0\212\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\u0142"+
    "\0\u03f4\0\212\0\212\0\u0422\0\u0450\0\u047e\0\u04ac\0\u04da"+
    "\0\u0508\0\u0536\0\u0564\0\u0592\0\u05c0\0\u05ee\0\346\0\u061c"+
    "\0\u064a\0\u0678\0\u06a6\0\u06d4\0\u0702\0\u0730\0\u075e\0\u078c"+
    "\0\u07ba\0\u033c\0\u07e8\0\u0816\0\u0844\0\u0872\0\u08a0\0\u08ce"+
    "\0\u08fc\0\u092a\0\u0958\0\u0986\0\u09b4\0\u09e2\0\u0a10\0\u0a3e"+
    "\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6\0\u0b24\0\u0b52\0\u0b80\0\u0bae"+
    "\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66\0\346\0\u0c94\0\u0cc2\0\u0cf0"+
    "\0\u0d1e\0\u0d4c\0\u0d7a\0\212\0\346\0\u0da8\0\u0dd6\0\u0e04"+
    "\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18\0\u0f46\0\u0f74"+
    "\0\u0fa2\0\u0fd0\0\u0ffe\0\u102c\0\212\0\u105a\0\u1088\0\u10b6"+
    "\0\u10e4\0\u1112\0\u1140\0\u116e\0\u119c\0\212\0\346\0\u11ca"+
    "\0\u11f8\0\u1226\0\u1254\0\u1282\0\u12b0\0\u12de\0\u130c\0\u133a"+
    "\0\u1368\0\u1396\0\u13c4\0\u13f2\0\u1420\0\u144e\0\u147c\0\u14aa"+
    "\0\u14d8\0\u1506\0\u1534\0\u1562\0\u1590\0\212\0\u15be\0\u15ec"+
    "\0\212\0\u161a\0\u1648\0\u1676\0\u16a4\0\u16d2\0\u1700\0\u172e"+
    "\0\u175c\0\u178a\0\u17b8\0\u17e6\0\u1814\0\u1842\0\u1870\0\u189e"+
    "\0\u18cc\0\u18fa\0\212\0\346\0\u1928\0\u1956\0\u1984\0\u19b2"+
    "\0\u19e0\0\u1a0e\0\u1a3c\0\u1a6a\0\u1a98\0\u1ac6\0\u1af4\0\u1b22"+
    "\0\212\0\u1b50\0\u1b7e\0\u1bac\0\u1bda\0\u1c08\0\u1c36\0\u1c64"+
    "\0\u1c92\0\u1cc0\0\u1cee\0\u1d1c\0\u1d4a\0\346\0\u1d78\0\u1da6"+
    "\0\u1dd4\0\u1e02\0\212\0\u1e30\0\u1e5e\0\u1e8c\0\212\0\u1eba"+
    "\0\u1ee8\0\u1f16\0\212\0\u1f44\0\212\0\u1f72\0\u1fa0\0\u1fce"+
    "\0\u1ffc\0\u202a\0\u2058\0\u2086\0\u20b4\0\u20e2\0\u2110\0\212"+
    "\0\u213e\0\u216c\0\u219a\0\u21c8\0\u21f6\0\u2224\0\u2252\0\u2280"+
    "\0\u22ae\0\u22dc\0\212\0\346\0\212\0\u230a\0\212\0\u2338"+
    "\0\u2366\0\212\0\u2394\0\u23c2\0\u23f0\0\212\0\u241e\0\u244c"+
    "\0\u247a\0\u24a8\0\u24d6\0\212\0\u2504\0\u2532\0\212\0\u2560"+
    "\0\u258e\0\346\0\u25bc\0\u25ea\0\u2618\0\u2646\0\212\0\346"+
    "\0\212\0\u2674\0\u26a2\0\212\0\u26d0\0\212\0\u26fe\0\212"+
    "\0\u272c\0\u275a\0\u2788\0\u27b6\0\212\0\u27e4\0\u2812\0\u2840"+
    "\0\u286e\0\u289c\0\212\0\346\0\u28ca\0\212\0\u28f8\0\212"+
    "\0\212\0\u2926\0\u2954\0\u2982\0\u29b0\0\212\0\u29de\0\u2a0c"+
    "\0\212\0\u2a3a\0\212\0\u2a68\0\u2a96\0\u2ac4\0\u2af2\0\212"+
    "\0\212\0\u2b20\0\u2b4e\0\212\0\212\0\212\0\u2b7c\0\212"+
    "\0\212\0\212\0\346\0\u2baa\0\u2bd8\0\u2c06\0\212\0\u2c34"+
    "\0\u2c62\0\212\0\u2c90\0\212\0\u2cbe\0\u2cec\0\212\0\212"+
    "\0\212\0\u2d1a\0\212";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[331];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\4\1\10\1\11\2\7"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\7\1\20"+
    "\1\4\1\7\1\21\1\22\1\23\5\7\1\24\1\25"+
    "\2\7\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\2\7\1\15\1\0\14\41"+
    "\1\42\53\41\1\4\1\43\42\41\57\0\1\5\1\44"+
    "\54\0\1\7\1\0\2\7\1\45\3\7\5\0\3\7"+
    "\1\0\11\7\1\0\3\7\13\0\2\7\3\0\1\7"+
    "\1\0\2\7\1\45\1\7\1\46\1\7\5\0\3\7"+
    "\1\0\11\7\1\0\2\7\1\47\13\0\2\7\2\0"+
    "\11\50\1\51\44\50\12\0\1\52\1\53\50\0\1\54"+
    "\1\0\1\55\5\0\1\56\1\0\1\57\2\60\1\61"+
    "\1\62\1\63\2\0\1\64\2\0\2\65\1\0\1\66"+
    "\20\0\1\7\1\0\2\7\1\45\3\7\5\0\1\7"+
    "\1\67\1\7\1\0\11\7\1\0\3\7\13\0\2\7"+
    "\3\0\1\7\1\0\2\7\1\45\3\7\5\0\3\7"+
    "\1\70\1\71\5\7\1\72\2\7\1\0\3\7\13\0"+
    "\2\7\3\0\1\7\1\0\2\7\1\45\3\7\5\0"+
    "\1\73\1\7\1\74\1\0\11\7\1\0\3\7\13\0"+
    "\2\7\3\0\1\7\1\0\2\7\1\45\1\7\1\75"+
    "\1\7\5\0\3\7\1\0\11\7\1\0\3\7\13\0"+
    "\2\7\3\0\1\7\1\0\2\7\1\45\3\7\5\0"+
    "\3\7\1\76\1\77\10\7\1\0\3\7\13\0\2\7"+
    "\37\0\1\100\21\0\1\7\1\0\2\7\1\45\3\7"+
    "\5\0\3\7\1\0\11\7\1\0\1\7\1\101\1\7"+
    "\13\0\2\7\14\0\1\42\44\0\1\102\57\0\1\103"+
    "\2\0\3\103\5\0\3\103\1\0\11\103\1\0\3\103"+
    "\13\0\2\103\3\0\1\7\1\0\2\7\1\45\3\7"+
    "\5\0\3\7\1\0\2\7\1\104\1\105\5\7\1\0"+
    "\3\7\13\0\2\7\3\0\1\7\1\0\2\7\1\45"+
    "\3\7\5\0\3\7\1\0\2\7\1\106\6\7\1\0"+
    "\3\7\13\0\2\7\13\0\1\50\53\0\1\107\6\0"+
    "\1\110\17\0\1\111\55\0\1\112\47\0\1\113\46\0"+
    "\2\114\5\0\1\115\5\0\1\116\27\0\1\117\13\0"+
    "\1\120\1\121\46\0\1\122\17\0\1\123\26\0\1\124"+
    "\67\0\2\125\43\0\1\126\102\0\1\127\43\0\1\130"+
    "\55\0\1\131\33\0\1\7\1\0\2\7\1\45\3\7"+
    "\5\0\3\7\1\0\1\7\1\132\7\7\1\0\3\7"+
    "\13\0\2\7\3\0\1\7\1\0\2\7\1\45\3\7"+
    "\5\0\3\7\1\0\7\7\1\133\1\7\1\0\3\7"+
    "\13\0\2\7\3\0\1\7\1\0\2\7\1\45\1\7"+
    "\1\134\1\7\5\0\3\7\1\0\11\7\1\0\3\7"+
    "\13\0\2\7\3\0\1\7\1\0\2\7\1\45\3\7"+
    "\5\0\3\7\1\0\2\7\1\135\6\7\1\0\3\7"+
    "\13\0\2\7\3\0\1\7\1\0\2\7\1\45\2\7"+
    "\1\136\5\0\3\7\1\0\11\7\1\0\3\7\13\0"+
    "\2\7\20\0\1\137\40\0\1\7\1\0\2\7\1\45"+
    "\3\7\5\0\1\140\2\7\1\0\11\7\1\0\3\7"+
    "\13\0\2\7\10\0\1\141\50\0\1\7\1\0\2\7"+
    "\1\45\1\142\2\7\5\0\3\7\1\0\11\7\1\0"+
    "\3\7\13\0\2\7\3\0\1\103\1\143\2\103\1\0"+
    "\3\103\5\0\3\103\1\0\11\103\1\0\3\103\13\0"+
    "\2\103\3\0\1\7\1\0\2\7\1\45\3\7\5\0"+
    "\3\7\1\0\11\7\1\144\1\145\2\7\13\0\2\7"+
    "\3\0\1\7\1\0\2\7\1\45\3\7\5\0\3\7"+
    "\1\146\1\147\10\7\1\0\3\7\13\0\2\7\3\0"+
    "\1\7\1\0\2\7\1\45\3\7\5\0\2\7\1\150"+
    "\1\0\11\7\1\0\3\7\13\0\2\7\27\0\1\151"+
    "\3\0\1\152\54\0\1\153\51\0\1\154\47\0\1\155"+
    "\1\0\1\156\54\0\1\157\66\0\1\160\56\0\1\161"+
    "\34\0\1\162\73\0\1\163\50\0\2\164\50\0\1\165"+
    "\21\0\1\166\25\0\1\167\101\0\2\170\31\0\1\171"+
    "\63\0\1\172\75\0\1\173\25\0\1\174\77\0\1\175"+
    "\34\0\1\176\47\0\1\7\1\0\2\7\1\45\1\7"+
    "\1\177\1\7\5\0\3\7\1\0\11\7\1\0\3\7"+
    "\13\0\2\7\3\0\1\7\1\0\2\7\1\45\3\7"+
    "\5\0\3\7\1\0\6\7\1\200\2\7\1\0\3\7"+
    "\13\0\2\7\3\0\1\7\1\0\2\7\1\45\3\7"+
    "\5\0\3\7\1\0\1\7\1\201\7\7\1\0\3\7"+
    "\13\0\2\7\3\0\1\7\1\0\2\7\1\45\3\7"+
    "\5\0\3\7\1\0\5\7\1\202\3\7\1\0\3\7"+
    "\13\0\2\7\32\0\1\203\26\0\1\7\1\0\2\7"+
    "\1\45\3\7\5\0\3\7\1\0\6\7\1\204\2\7"+
    "\1\0\3\7\13\0\2\7\37\0\1\205\21\0\1\7"+
    "\1\0\2\7\1\45\3\7\5\0\3\7\1\0\11\7"+
    "\1\0\1\7\1\206\1\7\13\0\2\7\10\0\1\207"+
    "\75\0\1\210\30\0\1\7\1\0\2\7\1\45\3\7"+
    "\5\0\3\7\1\0\4\7\1\211\4\7\1\0\3\7"+
    "\13\0\2\7\3\0\1\7\1\0\2\7\1\45\3\7"+
    "\5\0\3\7\1\212\1\213\10\7\1\0\3\7\13\0"+
    "\2\7\23\0\2\214\42\0\1\215\104\0\1\216\37\0"+
    "\1\217\43\0\1\220\77\0\1\221\62\0\1\222\44\0"+
    "\1\223\61\0\1\224\63\0\1\225\34\0\1\226\21\0"+
    "\1\227\24\0\1\230\64\0\1\231\63\0\1\232\1\0"+
    "\1\233\63\0\2\234\50\0\1\235\56\0\1\236\46\0"+
    "\2\237\70\0\1\240\51\0\1\241\25\0\1\7\1\0"+
    "\2\7\1\45\3\7\5\0\3\7\1\0\10\7\1\242"+
    "\1\0\3\7\13\0\2\7\3\0\1\7\1\0\2\7"+
    "\1\45\3\7\5\0\3\7\1\243\1\244\10\7\1\0"+
    "\3\7\13\0\2\7\3\0\1\7\1\0\2\7\1\45"+
    "\3\7\5\0\1\245\2\7\1\0\11\7\1\0\3\7"+
    "\13\0\2\7\10\0\1\246\50\0\1\7\1\0\2\7"+
    "\1\45\1\247\2\7\5\0\3\7\1\0\11\7\1\0"+
    "\3\7\13\0\2\7\20\0\1\250\40\0\1\7\1\0"+
    "\2\7\1\45\3\7\5\0\1\251\2\7\1\0\11\7"+
    "\1\0\3\7\13\0\2\7\11\0\1\252\55\0\1\253"+
    "\47\0\1\7\1\0\2\7\1\45\1\7\1\254\1\7"+
    "\5\0\3\7\1\0\11\7\1\0\3\7\13\0\2\7"+
    "\27\0\1\255\31\0\1\7\1\0\2\7\1\45\3\7"+
    "\5\0\3\7\1\0\3\7\1\256\5\7\1\0\3\7"+
    "\13\0\2\7\30\0\1\257\45\0\1\260\55\0\1\261"+
    "\60\0\2\262\71\0\1\263\56\0\1\264\46\0\1\265"+
    "\52\0\1\266\62\0\1\267\76\0\1\270\17\0\1\271"+
    "\61\0\2\272\54\0\2\273\70\0\1\274\72\0\1\275"+
    "\21\0\1\276\45\0\1\277\100\0\1\300\42\0\1\301"+
    "\70\0\1\302\25\0\1\7\1\0\2\7\1\45\1\7"+
    "\1\303\1\7\5\0\3\7\1\0\11\7\1\0\3\7"+
    "\13\0\2\7\32\0\1\304\26\0\1\7\1\0\2\7"+
    "\1\45\3\7\5\0\3\7\1\0\6\7\1\305\2\7"+
    "\1\0\3\7\13\0\2\7\3\0\1\7\1\0\2\7"+
    "\1\45\3\7\5\0\3\7\1\0\6\7\1\306\2\7"+
    "\1\0\3\7\13\0\2\7\10\0\1\307\50\0\1\7"+
    "\1\0\2\7\1\45\1\310\2\7\5\0\3\7\1\0"+
    "\11\7\1\0\3\7\13\0\2\7\35\0\2\311\22\0"+
    "\1\7\1\0\2\7\1\45\3\7\5\0\3\7\1\0"+
    "\11\7\1\311\1\312\2\7\13\0\2\7\12\0\1\313"+
    "\103\0\1\314\20\0\1\7\1\0\2\7\1\45\3\7"+
    "\5\0\3\7\1\0\11\7\1\0\2\7\1\315\13\0"+
    "\2\7\11\0\1\316\63\0\1\317\21\0\1\320\53\0"+
    "\1\321\45\0\1\322\45\0\1\323\21\0\1\324\33\0"+
    "\1\325\73\0\2\326\57\0\1\327\26\0\1\330\55\0"+
    "\1\331\55\0\1\332\76\0\1\333\33\0\1\334\56\0"+
    "\1\335\76\0\1\336\33\0\1\337\64\0\1\340\21\0"+
    "\1\341\51\0\2\342\42\0\2\343\34\0\1\7\1\0"+
    "\2\7\1\45\3\7\5\0\3\7\1\0\2\7\1\344"+
    "\6\7\1\0\3\7\13\0\2\7\22\0\1\345\36\0"+
    "\1\7\1\0\2\7\1\45\3\7\5\0\2\7\1\346"+
    "\1\0\11\7\1\0\3\7\13\0\2\7\23\0\2\347"+
    "\34\0\1\7\1\0\2\7\1\45\3\7\5\0\3\7"+
    "\1\347\1\350\10\7\1\0\3\7\13\0\2\7\40\0"+
    "\1\351\20\0\1\7\1\0\2\7\1\45\3\7\5\0"+
    "\3\7\1\0\11\7\1\0\2\7\1\352\13\0\2\7"+
    "\27\0\1\353\31\0\1\7\1\0\2\7\1\45\3\7"+
    "\5\0\3\7\1\0\3\7\1\354\5\7\1\0\3\7"+
    "\13\0\2\7\17\0\1\355\21\0\1\356\33\0\1\357"+
    "\73\0\2\360\57\0\1\361\34\0\1\362\60\0\1\363"+
    "\74\0\1\364\42\0\1\365\46\0\1\366\21\0\1\367"+
    "\53\0\1\370\40\0\1\371\55\0\1\372\53\0\1\373"+
    "\54\0\1\374\21\0\1\375\37\0\2\376\50\0\1\377"+
    "\76\0\1\u0100\44\0\1\u0101\31\0\1\7\1\0\2\7"+
    "\1\45\1\7\1\u0102\1\7\5\0\3\7\1\0\11\7"+
    "\1\0\3\7\13\0\2\7\40\0\1\u0103\20\0\1\7"+
    "\1\0\2\7\1\45\3\7\5\0\3\7\1\0\11\7"+
    "\1\0\2\7\1\u0104\13\0\2\7\11\0\1\u0105\47\0"+
    "\1\7\1\0\2\7\1\45\1\7\1\u0106\1\7\5\0"+
    "\3\7\1\0\11\7\1\0\3\7\13\0\2\7\33\0"+
    "\1\u0107\25\0\1\7\1\0\2\7\1\45\3\7\5\0"+
    "\3\7\1\0\7\7\1\u0108\1\7\1\0\3\7\13\0"+
    "\2\7\17\0\1\u0109\75\0\1\u010a\45\0\1\u010b\45\0"+
    "\1\u010c\21\0\1\u010d\33\0\1\u010e\47\0\1\u010f\63\0"+
    "\1\u0110\73\0\2\u0111\57\0\1\u0112\26\0\1\u0113\73\0"+
    "\1\u0114\45\0\1\u0115\47\0\1\u0116\77\0\1\u0117\33\0"+
    "\1\u0118\64\0\1\u0119\40\0\1\7\1\0\2\7\1\45"+
    "\3\7\5\0\1\u011a\2\7\1\0\11\7\1\0\3\7"+
    "\13\0\2\7\26\0\1\u011b\32\0\1\7\1\0\2\7"+
    "\1\45\3\7\5\0\3\7\1\0\2\7\1\u011c\6\7"+
    "\1\0\3\7\13\0\2\7\40\0\1\u011d\34\0\1\u011e"+
    "\21\0\1\u011f\33\0\1\u0120\55\0\1\u0121\21\0\1\u0122"+
    "\53\0\1\u0123\36\0\1\u0124\76\0\1\u0125\33\0\1\u0126"+
    "\21\0\1\u0127\42\0\1\u0128\46\0\1\u0129\21\0\1\u012a"+
    "\33\0\1\u012b\21\0\1\u012c\37\0\2\u012d\34\0\1\7"+
    "\1\0\2\7\1\45\3\7\5\0\3\7\1\u012d\1\u012e"+
    "\10\7\1\0\3\7\13\0\2\7\20\0\1\u012f\54\0"+
    "\1\u0130\55\0\1\u0131\76\0\1\u0132\40\0\2\u0133\50\0"+
    "\1\u0134\55\0\1\u0135\55\0\1\u0136\21\0\1\u0137\33\0"+
    "\1\u0138\55\0\1\u0139\47\0\1\u013a\47\0\1\7\1\0"+
    "\2\7\1\45\1\7\1\u013b\1\7\5\0\3\7\1\0"+
    "\11\7\1\0\3\7\13\0\2\7\23\0\2\u013c\51\0"+
    "\1\u013d\46\0\1\u013e\63\0\1\u013f\47\0\1\u0140\67\0"+
    "\2\u0141\50\0\1\u0142\21\0\1\u0143\33\0\1\u0144\21\0"+
    "\1\u0145\25\0\1\u0146\63\0\1\u0147\55\0\1\u0148\55\0"+
    "\1\u0149\21\0\1\u014a\33\0\1\u014b\40\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11592];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\1\1\1\11\3\1\2\11"+
    "\10\1\15\11\1\1\2\0\2\1\1\0\1\1\2\11"+
    "\13\0\1\1\1\0\5\1\1\0\1\1\1\0\2\1"+
    "\1\0\3\1\23\0\5\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\11\1\1\1\0\2\1\14\0\1\11\10\0"+
    "\1\11\4\1\1\0\1\1\1\0\1\1\2\0\1\1"+
    "\1\0\1\1\5\0\1\1\4\0\1\11\2\0\1\11"+
    "\10\0\1\1\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\11\1\1\1\0\1\1\12\0\1\11\11\0"+
    "\1\1\1\0\2\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\0\1\1\1\0\1\11\3\0\1\11\1\0\1\11"+
    "\1\0\1\1\10\0\1\11\3\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\11\1\1\1\11\1\0"+
    "\1\11\2\0\1\11\3\0\1\11\5\0\1\11\2\0"+
    "\1\11\2\0\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1\1\11\2\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\1\1\0\1\11\4\0\1\1\1\11\1\1"+
    "\1\0\1\11\1\0\2\11\4\0\1\11\2\0\1\11"+
    "\1\0\1\11\2\0\1\1\1\0\2\11\2\0\3\11"+
    "\1\0\3\11\1\1\3\0\1\11\2\0\1\11\1\0"+
    "\1\11\2\0\3\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[331];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public ArrayList<Errores> Lista_errores;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexico(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 194) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { System.out.println("Error Lexico: <<"+yytext()+">> ["+yyline+" , "+yycolumn+"]");
                                           Servidor.LISTA_ERRORES_LEXICOS.add(new Parametros("Error Léxico "+yytext(),Servidor.nombreArchivo, yyline, yycolumn));
                                           Lista_errores.add(new Errores(yytext(),yyline,yycolumn,"Error Lexico","Este simbolo no existe en el lenguaje"));
          }
        case 81: break;
        case 2: 
          { System.out.println("Reconocido: "+yytext()+", numero ");
                                           return new Symbol(Simbolos.numero, yycolumn, yyline, yytext());
          }
        case 82: break;
        case 3: 
          { System.out.println("Reconocido: "+yytext()+", punto");
                                       return new Symbol(Simbolos.punto, yycolumn, yyline, yytext());
          }
        case 83: break;
        case 4: 
          { System.out.println("Reconocido: "+yytext()+", id ");
                                           return new Symbol(Simbolos.id, yycolumn, yyline, yytext());
          }
        case 84: break;
        case 5: 
          { System.out.println("Reconocido: "+yytext()+", @");
                                       return new Symbol(Simbolos.arroba, yycolumn, yyline, yytext());
          }
        case 85: break;
        case 6: 
          { System.out.println("Reconocido: "+yytext()+", comillas");
                                       return new Symbol(Simbolos.comillas, yycolumn, yyline, yytext());
          }
        case 86: break;
        case 7: 
          { System.out.println("Reconocido: "+yytext()+", division");
                                       return new Symbol(Simbolos.division, yycolumn, yyline, yytext());
          }
        case 87: break;
        case 8: 
          { System.out.println("Reconocido: "+yytext()+", por");
                                       return new Symbol(Simbolos.por, yycolumn, yyline, yytext());
          }
        case 88: break;
        case 9: 
          { /* ignore white space. */
          }
        case 89: break;
        case 10: 
          { System.out.println("Reconocido: "+yytext()+", dolar");
                                       return new Symbol(Simbolos.dolar, yycolumn, yyline, yytext());
          }
        case 90: break;
        case 11: 
          { System.out.println("Reconocido: "+yytext()+", menor");
                                       return new Symbol(Simbolos.menor, yycolumn, yyline, yytext());
          }
        case 91: break;
        case 12: 
          { System.out.println("Reconocido: "+yytext()+", igual");
                                       return new Symbol(Simbolos.igual, yycolumn, yyline, yytext());
          }
        case 92: break;
        case 13: 
          { System.out.println("Reconocido: "+yytext()+", coma");
                                       return new Symbol(Simbolos.coma, yycolumn, yyline, yytext());
          }
        case 93: break;
        case 14: 
          { System.out.println("Reconocido: "+yytext()+", puntoycoma");
                                       return new Symbol(Simbolos.ptcoma, yycolumn, yyline, yytext());
          }
        case 94: break;
        case 15: 
          { System.out.println("Reconocido: "+yytext()+", mas");
                                       return new Symbol(Simbolos.mas, yycolumn, yyline, yytext());
          }
        case 95: break;
        case 16: 
          { System.out.println("Reconocido: "+yytext()+", llave");
                                       return new Symbol(Simbolos.illave, yycolumn, yyline, yytext());
          }
        case 96: break;
        case 17: 
          { System.out.println("Reconocido: "+yytext()+", llave");
                                       return new Symbol(Simbolos.fllave, yycolumn, yyline, yytext());
          }
        case 97: break;
        case 18: 
          { System.out.println("Reconocido: "+yytext()+", llave");
                                       return new Symbol(Simbolos.icor, yycolumn, yyline, yytext());
          }
        case 98: break;
        case 19: 
          { System.out.println("Reconocido: "+yytext()+", llave");
                                       return new Symbol(Simbolos.fcor, yycolumn, yyline, yytext());
          }
        case 99: break;
        case 20: 
          { System.out.println("Reconocido: "+yytext()+", parentesis");
                                       return new Symbol(Simbolos.apar, yycolumn, yyline, yytext());
          }
        case 100: break;
        case 21: 
          { System.out.println("Reconocido: "+yytext()+", parentesis");
                                       return new Symbol(Simbolos.cpar, yycolumn, yyline, yytext());
          }
        case 101: break;
        case 22: 
          { 
          }
        case 102: break;
        case 23: 
          { yybegin(YYINITIAL);
          }
        case 103: break;
        case 24: 
          { System.out.println("Reconocido: "+yytext()+", cadena ");
                                           return new Symbol(Simbolos.cadenastring, yycolumn, yyline, yytext());
          }
        case 104: break;
        case 25: 
          { yybegin(COMENT_SIMPLE);
          }
        case 105: break;
        case 26: 
          { yybegin(COMENT_MULTI);
          }
        case 106: break;
        case 27: 
          { System.out.println("Reconocido: "+yytext()+", raiz");
                                       return new Symbol(Simbolos.rq, yycolumn, yyline, yytext());
          }
        case 107: break;
        case 28: 
          { System.out.println("Reconocido: "+yytext()+", potencia");
                                       return new Symbol(Simbolos.ptn, yycolumn, yyline, yytext());
          }
        case 108: break;
        case 29: 
          { System.out.println("Reconocido: "+yytext()+", cons");
                                       return new Symbol(Simbolos.cons, yycolumn, yyline, yytext());
          }
        case 109: break;
        case 30: 
          { System.out.println("Reconocido: "+yytext()+", $id$");
                                           return new Symbol(Simbolos.iid, yycolumn, yyline, yytext());
          }
        case 110: break;
        case 31: 
          { System.out.println("Reconocido: "+yytext()+", tipo");
                                       return new Symbol(Simbolos.tiptip, yycolumn, yyline, yytext());
          }
        case 111: break;
        case 32: 
          { System.out.println("Reconocido: "+yytext()+", mate");
                                           return new Symbol(Simbolos.imate, yycolumn, yyline, yytext());
          }
        case 112: break;
        case 33: 
          { System.out.println("Reconocido: "+yytext()+", imagen");
                                           return new Symbol(Simbolos.iimg, yycolumn, yyline, yytext());
          }
        case 113: break;
        case 34: 
          { System.out.println("Reconocido: "+yytext()+", $id-$");
                                           return new Symbol(Simbolos.fid, yycolumn, yyline, yytext());
          }
        case 114: break;
        case 35: 
          { System.out.println("Reconocido: "+yytext()+", codigo");
                                       return new Symbol(Simbolos.codcod, yycolumn, yyline, yytext());
          }
        case 115: break;
        case 36: 
          { System.out.println("Reconocido: "+yytext()+", fin imagen");
                                           return new Symbol(Simbolos.fimg, yycolumn, yyline, yytext());
          }
        case 116: break;
        case 37: 
          { System.out.println("Reconocido: "+yytext()+", nombre");
                                       return new Symbol(Simbolos.nomnom, yycolumn, yyline, yytext());
          }
        case 117: break;
        case 38: 
          { System.out.println("Reconocido: "+yytext()+", correo ");
                                           return new Symbol(Simbolos.correo, yycolumn, yyline, yytext());
          }
        case 118: break;
        case 39: 
          { System.out.println("Reconocido: "+yytext()+", color");
                                           return new Symbol(Simbolos.icolor, yycolumn, yyline, yytext());
          }
        case 119: break;
        case 40: 
          { System.out.println("Reconocido: "+yytext()+", marca");
                                           return new Symbol(Simbolos.imarca, yycolumn, yyline, yytext());
          }
        case 120: break;
        case 41: 
          { System.out.println("Reconocido: "+yytext()+", fin mate");
                                           return new Symbol(Simbolos.fmate, yycolumn, yyline, yytext());
          }
        case 121: break;
        case 42: 
          { System.out.println("Reconocido: "+yytext()+", tienda");
                                           return new Symbol(Simbolos.itienda, yycolumn, yyline, yytext());
          }
        case 122: break;
        case 43: 
          { System.out.println("Reconocido: "+yytext()+", $email$");
                                           return new Symbol(Simbolos.iemail, yycolumn, yyline, yytext());
          }
        case 123: break;
        case 44: 
          { System.out.println("Reconocido: "+yytext()+", cantidad");
                                       return new Symbol(Simbolos.cantcant, yycolumn, yyline, yytext());
          }
        case 124: break;
        case 45: 
          { System.out.println("Reconocido: "+yytext()+", codigo");
                                           return new Symbol(Simbolos.icodigo, yycolumn, yyline, yytext());
          }
        case 125: break;
        case 46: 
          { System.out.println("Reconocido: "+yytext()+", fin color");
                                           return new Symbol(Simbolos.fcolor, yycolumn, yyline, yytext());
          }
        case 126: break;
        case 47: 
          { System.out.println("Reconocido: "+yytext()+", fin marca");
                                           return new Symbol(Simbolos.fmarca, yycolumn, yyline, yytext());
          }
        case 127: break;
        case 48: 
          { System.out.println("Reconocido: "+yytext()+", tamaño");
                                           return new Symbol(Simbolos.itam, yycolumn, yyline, yytext());
          }
        case 128: break;
        case 49: 
          { System.out.println("Reconocido: "+yytext()+", $nombre$");
                                           return new Symbol(Simbolos.inombre, yycolumn, yyline, yytext());
          }
        case 129: break;
        case 50: 
          { System.out.println("Reconocido: "+yytext()+", $email-$");
                                           return new Symbol(Simbolos.femail, yycolumn, yyline, yytext());
          }
        case 130: break;
        case 51: 
          { System.out.println("Reconocido: "+yytext()+", telefono");
                                       return new Symbol(Simbolos.teltel, yycolumn, yyline, yytext());
          }
        case 131: break;
        case 52: 
          { System.out.println("Reconocido: "+yytext()+", sucursal");
                                       return new Symbol(Simbolos.sucursucur, yycolumn, yyline, yytext());
          }
        case 132: break;
        case 53: 
          { System.out.println("Reconocido: "+yytext()+", fin codigo");
                                           return new Symbol(Simbolos.fcodigo, yycolumn, yyline, yytext());
          }
        case 133: break;
        case 54: 
          { System.out.println("Reconocido: "+yytext()+", $request$");
                                           return new Symbol(Simbolos.irequest, yycolumn, yyline, yytext());
          }
        case 134: break;
        case 55: 
          { System.out.println("Reconocido: "+yytext()+", fin tienda");
                                           return new Symbol(Simbolos.ftienda, yycolumn, yyline, yytext());
          }
        case 135: break;
        case 56: 
          { System.out.println("Reconocido: "+yytext()+", fin tamaño");
                                           return new Symbol(Simbolos.ftam, yycolumn, yyline, yytext());
          }
        case 136: break;
        case 57: 
          { System.out.println("Reconocido: "+yytext()+", producto");
                                           return new Symbol(Simbolos.iproducto, yycolumn, yyline, yytext());
          }
        case 137: break;
        case 58: 
          { System.out.println("Reconocido: "+yytext()+", $nombre-$");
                                           return new Symbol(Simbolos.fnombre, yycolumn, yyline, yytext());
          }
        case 138: break;
        case 59: 
          { System.out.println("Reconocido: "+yytext()+", direccion");
                                       return new Symbol(Simbolos.dirdir, yycolumn, yyline, yytext());
          }
        case 139: break;
        case 60: 
          { System.out.println("Reconocido: "+yytext()+", cantidad");
                                           return new Symbol(Simbolos.icantidad, yycolumn, yyline, yytext());
          }
        case 140: break;
        case 61: 
          { System.out.println("Reconocido: "+yytext()+", $request-$");
                                           return new Symbol(Simbolos.frequest, yycolumn, yyline, yytext());
          }
        case 141: break;
        case 62: 
          { System.out.println("Reconocido: "+yytext()+", $telefono$");
                                           return new Symbol(Simbolos.itelefono, yycolumn, yyline, yytext());
          }
        case 142: break;
        case 63: 
          { System.out.println("Reconocido: "+yytext()+", $password$");
                                           return new Symbol(Simbolos.ipass, yycolumn, yyline, yytext());
          }
        case 143: break;
        case 64: 
          { System.out.println("Reconocido: "+yytext()+", sucursal");
                                           return new Symbol(Simbolos.isucursal, yycolumn, yyline, yytext());
          }
        case 144: break;
        case 65: 
          { System.out.println("Reconocido: "+yytext()+", $apellido$");
                                           return new Symbol(Simbolos.iapellido, yycolumn, yyline, yytext());
          }
        case 145: break;
        case 66: 
          { System.out.println("Reconocido: "+yytext()+", fin cantidad");
                                           return new Symbol(Simbolos.fcantidad, yycolumn, yyline, yytext());
          }
        case 146: break;
        case 67: 
          { System.out.println("Reconocido: "+yytext()+", $telefono-$");
                                           return new Symbol(Simbolos.ftelefono, yycolumn, yyline, yytext());
          }
        case 147: break;
        case 68: 
          { System.out.println("Reconocido: "+yytext()+", fin producto");
                                           return new Symbol(Simbolos.fproducto, yycolumn, yyline, yytext());
          }
        case 148: break;
        case 69: 
          { System.out.println("Reconocido: "+yytext()+", $password-$");
                                           return new Symbol(Simbolos.fpass, yycolumn, yyline, yytext());
          }
        case 149: break;
        case 70: 
          { System.out.println("Reconocido: "+yytext()+", $direccion$");
                                           return new Symbol(Simbolos.idireccion, yycolumn, yyline, yytext());
          }
        case 150: break;
        case 71: 
          { System.out.println("Reconocido: "+yytext()+", fin sucursal");
                                           return new Symbol(Simbolos.fsucursal, yycolumn, yyline, yytext());
          }
        case 151: break;
        case 72: 
          { System.out.println("Reconocido: "+yytext()+", $apellido-$");
                                           return new Symbol(Simbolos.fapellido, yycolumn, yyline, yytext());
          }
        case 152: break;
        case 73: 
          { System.out.println("Reconocido: "+yytext()+", propietario");
                                       return new Symbol(Simbolos.propipropi, yycolumn, yyline, yytext());
          }
        case 153: break;
        case 74: 
          { System.out.println("Reconocido: "+yytext()+", $direccion-$");
                                           return new Symbol(Simbolos.fdireccion, yycolumn, yyline, yytext());
          }
        case 154: break;
        case 75: 
          { System.out.println("Reconocido: "+yytext()+", propietario");
                                           return new Symbol(Simbolos.ipropietario, yycolumn, yyline, yytext());
          }
        case 155: break;
        case 76: 
          { System.out.println("Reconocido: "+yytext()+", $CrearUsuario$");
                                           return new Symbol(Simbolos.icrearusuario, yycolumn, yyline, yytext());
          }
        case 156: break;
        case 77: 
          { System.out.println("Reconocido: "+yytext()+", fin propietario");
                                           return new Symbol(Simbolos.fpropietario, yycolumn, yyline, yytext());
          }
        case 157: break;
        case 78: 
          { System.out.println("Reconocido: "+yytext()+", $CrearUsuario-$");
                                           return new Symbol(Simbolos.fcrearusuario, yycolumn, yyline, yytext());
          }
        case 158: break;
        case 79: 
          { System.out.println("Reconocido: "+yytext()+", $InicioUsuario$");
                                           return new Symbol(Simbolos.iusuario, yycolumn, yyline, yytext());
          }
        case 159: break;
        case 80: 
          { System.out.println("Reconocido: "+yytext()+", $InicioUsuario-$");
                                           return new Symbol(Simbolos.fusuario, yycolumn, yyline, yytext());
          }
        case 160: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(Simbolos.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
